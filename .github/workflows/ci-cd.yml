name: CI/CD UNIVESP Polos

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: univesp-polos

jobs:
  test:
    name: Executar Testes
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_prod.txt

      - name: Executar testes com cobertura
        env:
          DJANGO_SETTINGS_MODULE: univesp_polos.settings
          DATABASE_URL: mysql://root:root@localhost:3306/test_db
        run: |
          pip install coverage pylint
          coverage run manage.py test
          coverage xml
          pylint --output-format=parseable --reports=no polos/ > pylint-report.txt || true

      - name: Análise SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Verificar Qualidade do Código
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl --location --request GET "https://sonarcloud.io/api/qualitygates/project_status?projectKey=univesp-polos" \
          --header "Authorization: Bearer $SONAR_TOKEN" \
          -o quality_gate.json

          if [[ $(jq -r '.projectStatus.status' quality_gate.json) != "OK" ]]; then
            echo "Quality Gate falhou. Verifique os resultados em https://sonarcloud.io/dashboard?id=univesp-polos"
            exit 1
          fi

  build:
    name: Build e Push
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build e push da imagem Docker
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-staging:
    name: Deploy para Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy para Staging
        run: |
          chmod +x aws/update.sh
          ./aws/update.sh staging

  deploy-production:
    name: Deploy para Produção
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://univesp-polos.com.br

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy para Produção
        run: |
          chmod +x aws/update.sh
          ./aws/update.sh prod
